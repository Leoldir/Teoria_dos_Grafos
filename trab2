import statistics
import copy
import numpy as np
from operator import itemgetter
from collections import deque

#Abrindo arquivo e lendo 
num=input("Qual arquivo deseja analisar? Digite o nome sem extensão.")
direcionado = input("O grafo é direcionado? True/False")
f = open(num + '.txt', 'r')
r=f.read()
f.close()

##### Convertendo o arquivo lido r para um lista, e depois agrupando essa lista em lista de listas(arestas).
temPeso = False
pesoNegativo = False

arestas=r.split("\n")
n=int(arestas.pop(0))
i=0
while i < len(arestas):
    arestas[i] = arestas[i].split(" ")
    arestas[i][0]=int(arestas[i][0])   #Convertindo de str para int, para evitar dor de cabeça futura
    arestas[i][1]=int(arestas[i][1])
    i += 1

if len(arestas[0]) == 3:
    temPeso = True
    i=0
    while i<len(arestas):
        arestas[i][2]=float(arestas[i][2])   #Mesma coisa, com float
        if arestas[i][2]<0:
            pesoNegativo = True
        i += 1

#print(arestas[0])
#print(n)
#print(temPeso)
#print(pesoNegativo)

def listadj():
    B=[[] for i in range(n)]
    for i in range(len(arestas)):
        B[arestas[i][0]-1].append([arestas[i][1], arestas[i][2]])
        if not direcionado:
            B[arestas[i][1]-1].append([arestas[i][0], arestas[i][2]])
    return B
listadevizinhos = listadj()

def dijkstra(v, final=None):
    if pesoNegativo:
        return "O grafo tem pesos negativos."
    dist = np.array([float('inf') for _ in range(n)])
    visit = np.array([False for _ in range(n)])
    pai = np.array([-1 for _ in range(n)])
    dist[v-1]=0
    for _ in range(n-1):
        for ver in range(1, n+1):
            if visit[ver-1]==False:
                menor=ver
                break
        for ver in range(menor+1, n+1):
            if dist[ver-1]<dist[menor-1] and visit[ver-1]==False:
                menor=ver
        if menor == float('inf'):
            break
        for viz in listadevizinhos[menor-1]:
            if dist[menor-1]+viz[1]<dist[viz[0]-1] and visit[viz[0]-1]==False:
                dist[viz[0]-1]=dist[menor-1]+viz[1]
                pai[viz[0]-1]=menor
        visit[menor-1]=True
        if menor == final:
            break
    if final==None:
        dist_arr = [round(elem, 2) for elem in dist]
        return pai, dist_arr
    return pai, dist

def acharRepre(repre, i):
    if repre[i-1] == -1:
        return i
    else:
        return acharRepre(repre, repre[i-1])
def Kruskal():
    repre = deque([-1 for i in range(n)])
    lis = sorted(arestas, key=lambda are: are[2])
    arvore = []
    peso = 0
    arvoretxt = open("mst_" + num + ".txt", "w")
    while len(arvore)<n-1:
        if lis == []:
            break
        menor = lis.pop(0)
        a = acharRepre(repre, menor[0])
        b = acharRepre(repre, menor[1])
        if a != b:
            arvore.append(menor)
            repre[menor[0]-1]=menor[1]
            peso = peso + menor[2]
            arvoretxt.write(str(menor[0])+' '+str(menor[1])+'\n')
    arvoretxt.close()
    return round(peso,2)#, arvore

def BellmanFord(v):
    dist = np.array([float('inf') for i in range(n)])
    dist[v-1] = 0
    atualizado = np.array([False for i in range(n)])
    atualizado[v-1] = True
    pai = np.array([-1 for i in range(n)])
    for count in range(n-1):     #Repete o algoritmo n-1 vezes
        find = False
        for ver in range(1, n+1):
            if atualizado[ver-1] == True:   #Melhoria prática #2, só tenta atualizar os vizinhos se o vértice foi atualizado
                for viz in listadevizinhos[ver-1]:
                    if dist[viz[0]-1] > dist[ver-1] + viz[1]:
                        dist[viz[0]-1] = dist[ver-1] + viz[1]
                        pai[viz[0]-1] = ver
                        atualizado[viz[0]-1] = True   
                atualizado[ver-1] = False       #"usou" o vértice atualizado
        for i in range(n):
            if atualizado[i] == True:   #Verifica se algum vértice foi atualizado
                find = True
                break
        if not find:        #Se nenhum vértice tiver sido atualizado, para de repetir o algoritmo
            break
    for ver in range(1, n+1):
            for viz in listadevizinhos[ver-1]:
                if dist[viz[0]-1] > dist[ver-1] + viz[1] and (pai[ver-1] != viz[0]) and (pai[viz[0]-1] != ver):
                    return "O grafo tem ciclo(s) negativo(s)", pai, ver
    return pai, dist

def traçar(listaDePais, começo, fim):
    caminho = [fim]
    while caminho[-1]!=começo:
        caminho.append(listaDePais[caminho[-1]-1])
    caminho.reverse()
    return caminho
  
  
def findNegCycle(pai, ver): #O vértice selecionado tem que ser um vértice alcançavel por algum dos vértices do ciclo negativo.
    candidatos=[ver]         #Pode ser uma das extremidades da aresta que ainda pode ser relaxado no passo n de Bellman-Ford
    while True:
        if pai[candidatos[-1]-1] not in candidatos:
            candidatos.append(pai[candidatos[-1]-1])
        else: 
            break
    while candidatos[0]!=pai[candidatos[-1]-1]:
        del candidatos[0]
    candidatos.reverse()
    return candidatos
#print(findNegCycle(busca[1], busca[2]))

#funcao principal
def dist2vert():
    a=int(input("Escolha um vértice origem: "))
    b=input("Escolha um (ou mais) vértices destino, separados por vírgula: ")
    destino = b.split(',')
    if direcionado:
        busca=BellmanFord(a)
        if type(busca[0]) == str:
            return busca[0], findNegCycle(busca[1], busca[2])
        for i in destino:
            caminho = traçar(busca[0], 1, int(i))
            if busca[1][int(i)-1]==float('inf'):
                print("Não existe caminho para o vértice "+i)
            else:
                print("Distância do vértice "+i+": "+str(busca[1][int(i)-1])+". Caminho:"+ str(caminho))
    elif temPeso == False:
        busca=BFSlis(a)
        if type(busca) == str:
            return busca
        for i in destino:
            caminho = traçar(busca[0], 1, int(i))
            if busca[1][int(i)-1]==0:
                print("Não existe caminho para o vértice "+i)
            else:
                print("Distância do vértice "+i+": "+str(busca[1][i-1])+". Caminho:"+ str(caminho))
        return
    elif pesoNegativo == False:
        busca=dijkstra(a)
        if type(busca) == str:
            return busca
        for i in destino:
            caminho = traçar(busca[0], 1, int(i))
            if busca[1][int(i)-1]==float('inf'):
                print("Não existe caminho para o vértice "+i)
            else:
                print("Distância do vértice "+i+": "+str(busca[1][int(i)-1])+". Caminho:"+ str(caminho))
        return
    else:
        #busca=BellmanFordNaoDirecionado(a)
        #if type(busca) == str:
        #    return busca
        #for i in destino:
        #    caminho = traçar(busca[0], 1, int(i))
        #    if busca[1][int(i)-1]==float('inf'):
        #        print("Não existe caminho para o vértice "+i)
        #    else:
        #        print("Distância do vértice "+i+": "+str(busca[1][int(i)-1])+". Caminho:"+ str(caminho))
        return
print(dist2vert())

## Algoritmos do 1° trabalho com adaptações
def DFSmat(inicio):
    if temPeso:
        return "O grafo tem pesos."
    marc  =np.array([0 for i in range(n)])
    pais  =np.array([0 for i in range(n)])
    niveis=np.array([0 for i in range(n)])
    pilha=deque([])
    grafo=matadj()
    
    arvDFS=open("Árvore DFS.txt", "w", encoding='utf-8')
    arvDFS.write("Vértice: "+str(inicio)+", Nível: 0\n")
    
    pilha.append(inicio)
    while pilha != deque([]):
        q=pilha.pop()
        if marc[q-1]==0:
            marc[q-1]=1
            for i in range(n):
                if (grafo[q-1][i-1])==1:
                    pilha.append(i)
                    if pais[i-1]==0 and i!=inicio:
                        pais[i-1]=q
                        niveis[i-1]=niveis[q-1]+1
                        arvDFS.write("Vértice: "+str(i)+", Nível: "+str(niveis[i-1])+", Pai: "+str(q)+"\n")
                        
    arvDFS.close()
    return pais, niveis
    
    
def DFSlis(v):
    if temPeso:
        return "O grafo tem pesos."
    marc  =np.array([0 for i in range(n)])
    pais  =np.array([0 for i in range(n)])
    niveis=np.array([0 for i in range(n)])
    pilha=deque([])
    lis=listadj()
    
    arvDFS=open("Árvore DFS.txt", "w", encoding='utf-8')
    arvDFS.write("Vértice: "+str(v)+", Nível: 0\n")
    
    pilha.append(v)
    while pilha != deque([]):
        q=pilha.pop()
        if marc[q-1]==0:
            marc[q-1]=1
            for viz in lis[q]:
                pilha.append(viz)
                if pais[viz-1]==0 and viz != v:
                    pais[viz-1]=q
                    niveis[viz-1]=niveis[q-1]+1
                    arvDFS.write("Vértice: "+str(viz)+", Nível: "+str(niveis[viz-1])+", Pai: "+str(q)+"\n")
                    
    arvDFS.close()
    return pais, niveis
   
   
def BFSmat(inicio):
    if temPeso:
        return "O grafo tem pesos."
    marc  =np.array([0 for i in range(n)])
    pais  =np.array([0 for i in range(n)])
    niveis=np.array([0 for i in range(n)])
    fila=deque([])
    grafo=matadj()
    componente=[]
    
    arvBFS=open("Árvore DFS.txt", "w", encoding='utf-8')
    arvBFS.write("Vértice: "+str(inicio)+", Nível: 0\n")
    
    fila.append(inicio)
    while fila != deque([]):
        q=fila.popleft()
        for i in range(n):
            if ((marc[i-1]==0) and (grafo[q-1][i-1]))==1:
                marc[i-1]=1
                pais[i-1]=q
                niveis[i-1]=niveis[q-1]+1
                fila.append(i)
                componente.append(i)
                arvBFS.write("Vértice: "+str(i)+", Nível: "+str(niveis[i-1])+", Pai: "+str(q)+"\n")
                
    arvBFS.close()
    return pais, niveis, componente
    
    
def BFSlis(v):
    if temPeso:
        return "O grafo tem pesos."
    marc  =np.array([0 for i in range(n)])
    pais  =np.array([0 for i in range(n)])
    niveis=np.array([0 for i in range(n)])
    fila=deque([])
    lis=listadj()
    componente=[]
    
    arvBFS=open("Árvore BFS.txt","w",encoding='utf-8')
    arvBFS.write("Vértice: "+str(v)+", Nível: 0\n")
    
    marc[v-1]=1
    componente.append(v)
    fila.append(v)
    while fila != deque([]):
        q=fila.popleft()
        for viz in lis[q]:
            if marc[viz-1]==0:
                marc[viz-1]=1
                pais[viz-1]=q
                niveis[viz-1]=niveis[q-1]+1
                fila.append(viz)
                componente.append(viz)
                arvBFS.write("Vértice: "+str(viz)+", Nível: "+str(niveis[viz-1])+", Pai: "+str(q)+"\n")
                
    arvBFS.close()
    return pais, niveis, componente
   
